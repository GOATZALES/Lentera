# ai_services/client.py
import google.generativeai as genai
from django.conf import settings
import logging

logger = logging.getLogger(__name__) # atau logging.getLogger('ai_services')

# Konfigurasi Google Generative AI (Gemini)
if hasattr(settings, 'GOOGLE_API_KEY') and settings.GOOGLE_API_KEY:
    try:
        genai.configure(api_key=settings.GOOGLE_API_KEY)
        logger.info("Google Generative AI (Gemini) configured successfully.")
    except Exception as e:
        logger.error(f"Error configuring Google Generative AI: {e}", exc_info=True)
else:
    logger.warning("GOOGLE_API_KEY not found in settings. Google AI services (Gemini) may not function.")

def get_gemini_text_response(prompt_text: str, model_name: str = "gemini-1.5-flash-latest"):
    """
    Mendapatkan respons teks dari model Gemini.
    """
    if not (hasattr(settings, 'GOOGLE_API_KEY') and settings.GOOGLE_API_KEY):
        logger.error("Google API key (for Gemini) not configured.")
        return {"error": "AI service not configured.", "status_code": 503}

    try:
        model = genai.GenerativeModel(model_name)
        # Konfigurasi tambahan untuk safety (opsional, bisa disesuaikan)
        # safety_settings = [
        #     {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
        #     {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
        #     {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
        #     {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
        # ]
        # response = model.generate_content(prompt_text, safety_settings=safety_settings)
        
        response = model.generate_content(prompt_text)

        if response.parts:
            logger.debug(f"Gemini raw response text: {response.text[:500]}...") # Log sebagian respons
            return response.text
        elif response.prompt_feedback and response.prompt_feedback.block_reason:
            block_reason_message = response.prompt_feedback.block_reason_message or "Unknown block reason"
            logger.warning(f"Gemini request blocked. Reason: {response.prompt_feedback.block_reason} - {block_reason_message}")
            return {"error": f"Request blocked by AI. Reason: {block_reason_message}", "status_code": 403} # 403 Forbidden
        else:
            # Periksa candidates untuk detail lebih lanjut jika tidak ada parts atau block_reason
            candidate_info = "No parts or specific block reason found."
            if response.candidates:
                candidate_info = f"Finish reason: {response.candidates[0].finish_reason}. Safety ratings: {response.candidates[0].safety_ratings}"
            logger.warning(f"Gemini response did not contain any parts. Candidate info: {candidate_info}")
            return {"error": f"No content generated by AI. Details: {candidate_info}", "status_code": 500}

    except Exception as e:
        # Tangani error spesifik dari library jika memungkinkan
        # Contoh: google.api_core.exceptions.PermissionDenied, google.api_core.exceptions.ResourceExhausted
        error_message = str(e)
        status_code = 500 # Default internal server error
        
        # Anda bisa menambahkan penanganan error yang lebih spesifik di sini
        # if isinstance(e, google.api_core.exceptions.InvalidArgument):
        #     error_message = f"Invalid argument for Gemini API: {e}"
        #     status_code = 400
        # elif isinstance(e, google.api_core.exceptions.PermissionDenied):
        #     error_message = f"Permission denied for Gemini API (check API key/permissions): {e}"
        #     status_code = 403
        # elif isinstance(e, google.api_core.exceptions.ResourceExhausted):
        #     error_message = f"Gemini API quota exceeded: {e}"
        #     status_code = 429 # Too Many Requests

        logger.error(f"Google Generative AI (Gemini) API error: {error_message}", exc_info=True)
        return {"error": f"Error communicating with AI service: {error_message}", "status_code": status_code}

# Fungsi untuk chat bisa ditambahkan di sini jika diperlukan untuk fitur lain